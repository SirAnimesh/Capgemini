# Docker Compose file for Capgemini
#
#   Build images: docker-compose build
#      Start app: docker-compose up api
# Start database: docker-compose up cache
#       Stop all: docker-compose down (add -v to wipe cache)
#
# Exposes API server on port 80 on localhost by default. Use the API_PORT
# environment variable to specify a different port:
#   $ API_PORT=4000 docker-compose up
#

networks:
  hooligan:
    name: hooligan

volumes:
  hooligan:
    name: hooligan

services:
  api:
    container_name: hooligan-api
    image: hooligan-api:latest
    build:
      context: api
      args:
        PORT: 80
    environment:
      API_JWT_KEY_EXPIRE_IN_SECONDS: ${API_JWT_KEY_EXPIRE_IN_SECONDS:-3000}
      API_JWT_KEY: ${API_JWT_KEY:-somejwtkey}
      API_LOG_LEVEL: ${API_LOG_LEVEL:-debug}
      API_PORT: ${API_PORT:-3000}
      CACHE_HOST: ${CACHE_HOST:-cache}
      CACHE_PORT: ${CACHE_PORT:-6379}
      STAGE: ${STAGE:-local} # One of: local, staging, prod
      WEBSITE_PORT: ${WEBSITE_PORT:-80}
    depends_on:
      - cache
    networks:
      - hooligan
    ports:
      - "${API_PORT:-3000}:80"
  cache:
    image: redis/redis-stack:latest
    container_name: hooligan-cache
    volumes:
      - hooligan:/data
    networks:
      - hooligan
    ports:
      - "4000:6379"  # Redis Stack server
      - "4001:8001"  # RedisInsight
  website:
    container_name: hooligan-website
    image: hooligan-website:latest
    build:
      context: website
    depends_on:
      - api
    networks:
      - hooligan
    ports:
      - "${WEBSITE_PORT:-80}:80"
